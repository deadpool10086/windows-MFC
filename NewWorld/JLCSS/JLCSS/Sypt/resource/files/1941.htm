<html> <head> <meta http-equiv="Content-Type" content="text/html; charset=gb2312" /> <title></title> <link href="inc/style.css" rel="stylesheet" type="text/css"> </head>  <body class=infobody> <table width="100%" height="100%" cellspacing="0">  <tr>  <td valign="top"> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:none" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:none"><nobr>aabb1aabb</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:none" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle">&nbsp;&nbsp;&nbsp; 基于TCP（面向连接）的socket编程的服务器端程序流程如下：<BR>&nbsp;&nbsp;&nbsp; （1）创建套接字（socket）。<BR>&nbsp;&nbsp;&nbsp; （2）将套接字绑定到一个本地地址和端口上（bind）。<BR>&nbsp;&nbsp;&nbsp; （3）将套接字设为监听模式，准备接收客户请求（listen）。<BR>&nbsp;&nbsp;&nbsp; （4）等待客户请求到来；当请求到来后，接受连接请求，返回一个新的对应于此次连接的套接字（accept）。<BR>&nbsp;&nbsp;&nbsp; （5）用返回的套接字和客户端进行通信（send/recv）。<BR>&nbsp;&nbsp;&nbsp; （6）返回，等待另一客户请求。<BR>&nbsp;&nbsp;&nbsp; （7）关闭套接字。<BR>&nbsp;&nbsp;&nbsp; 基于TCP（面向连接）的socket编程的客户端程序流程如下：<BR>&nbsp;&nbsp;&nbsp; （1）创建套接字（socket）。<BR>&nbsp;&nbsp;&nbsp; （2）向服务器发出连接请求（connect）。<BR>&nbsp;&nbsp;&nbsp; （3）与服务器端进行通信（send/recv）。<BR>&nbsp;&nbsp;&nbsp; （4）关闭套接字。<BR>&nbsp;&nbsp;&nbsp; 在服务器端，当调用accept函数时，程序就会等待，等待客户端调用connect函数发出连接请求，然后服务器端接受该请求，于是双方就建立了连接。之后，服务器端和客户端就可以利用send和recv函数进行通信了。读者应注意，在客户端并不需要调用bind函数。因为服务器需要接收客户端的请求，所以必须告诉本地主机它打算在哪个IP地址和哪个端口上等待客户请求，因此必须调用bind函数来实现这一功能。而对客户端来说，当它发起连接请求，服务器接受该请求后，在服务器端就保存了该客户端的IP地址和端口的信息。这样，对服务器端来说，一旦建立连接之后，实际上它已经保存了客户端的IP地址和端口号的信息，因此就可以利用所返回的套接字调用send/recv函数与客户端进行通信。</td>             </tr>           </table>  </td> </tr> </table> </body> </html> <script> if(window.HTMLElement) {     HTMLElement.prototype.__defineSetter__("outerHTML",function(sHTML){         var r=this.ownerDocument.createRange();         r.setStartBefore(this);         var df=r.createContextualFragment(sHTML);         this.parentNode.replaceChild(df,this);         return sHTML;         });      HTMLElement.prototype.__defineGetter__("outerHTML",function(){      var attr;         var attrs=this.attributes;         var str="<"+this.tagName.toLowerCase();         for(var i=0;i<attrs.length;i++){             attr=attrs[i];             if(attr.specified)                 str+=" "+attr.name+'="'+attr.value+'"';             }         if(!this.canHaveChildren)             return str+">";         return str+">"+this.innerHTML+"</"+this.tagName.toLowerCase()+">";         });           HTMLElement.prototype.__defineGetter__("canHaveChildren",function(){   switch(this.tagName.toLowerCase()){             case "area":             case "base":          case "basefont":             case "col":             case "frame":             case "hr":             case "img":             case "br":             case "input":             case "isindex":             case "link":             case "meta":             case "param":             return false;         }         return true;       }); }  function showMe(i) {  	objHtml=document.all["s"+i].innerHTML; 	date=new Date(); 	if(navigator.userAgent.indexOf("MSIE")>0) 		window.status="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	else 		top.document.title="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	}  	if(navigator.userAgent.indexOf("MSIE")>0) 	var objects=document.all.tags("OBJECT"); 	else 	var objects=document.getElementsByTagName("OBJECT"); 	for(i=0;i<objects.length;i++) { objects[i].style.width="100%"; objects[i].outerHTML="<a href=# onclick=\"showMe("+i+")\">动画演示</a><span id=s"+i+" style=\"display:none\">"+objects[i].outerHTML+"</span>"; } var iHtml=document.body.innerHTML;  </script> 