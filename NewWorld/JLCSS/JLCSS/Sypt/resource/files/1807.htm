<html> <head> <meta http-equiv="Content-Type" content="text/html; charset=gb2312" /> <title></title> <link href="inc/style.css" rel="stylesheet" type="text/css"> </head>  <body class=infobody> <table width="100%" height="100%" cellspacing="0">  <tr>  <td valign="top"> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>内容摘要</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle">六. 协议栈实现代码解析<BR>七. 各模块推荐流程<BR>&nbsp;&nbsp;&nbsp; 1.&nbsp; Ethernet V2数据帧发送流程<BR>&nbsp;&nbsp;&nbsp; 2.&nbsp; Ethernet V2数据帧处理流程</td>             </tr>           </table> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>相关内容</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle"><P><STRONG>六. 协议栈实现代码解析</STRONG><BR>&nbsp;&nbsp;&nbsp; 本实验将通过对netproto_eth_student.h和netproto_eth_student.c两个文件进行编码，完成协议栈中以太网数据帧接收和发送的实现。<BR>&nbsp;&nbsp;&nbsp; netproto_eth_student.h文件中定义了以太网数据帧中“协议类型与数据长度”字段值以及以太网数据帧的负载内容、负载长度，关键代码如下所示：</P>
<P align=center><IMG src="../upload/1227337519031_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; 这段代码定义了3个宏，他们代表的含义如下表所示：</P>
<P align=center>表1-1&nbsp; netproto_eth_student.h中定义的宏</P>
<P align=center><IMG src="../upload/1230599071359_pic.jpg"></P>
<P>&nbsp;&nbsp;&nbsp; 在实验的编码过程中，应该使用这些宏对相应的变量进行赋值。学生也可以根据自己的需求修改这些宏定义的值。<BR>&nbsp;&nbsp;&nbsp; netproto_eth_student.c文件是协议栈中以太网数据帧的实现部分，其中定义了2个函数。下面分别介绍这些协议栈的实现部分。<BR>&nbsp;&nbsp;&nbsp; 函数netp_eth_output_student的功能是编辑并发送一个Ethernet V2数据帧。这个函数的编码工作需要由学生完成。<BR>&nbsp;&nbsp;&nbsp; 当有数据到达本机网络接口时，函数netp_eth_input_student将被调用，并传递给这个函数原始数据。该函数的返回值为push_to_lwip的枚举类型值，push_to_lwip的定义如下：</P>
<P align=center><IMG src="../upload/1227337557156_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; 返回NETP_PUSH_TO_LWIP表示这个数据帧应该提交给协议栈上层继续处理，而返回NETP_NO_PUSH_LIWP则表示不需要提交给协议栈上层处理，本层处理完毕后，这个数据帧将被丢弃。需要根据正确的逻辑关系返回适当的值，使协议栈正常工作。<BR>&nbsp;&nbsp;&nbsp; 在编码过程中可能会遇到一些结构体、宏和函数，下表是对他们进行和介绍：</P>
<P align=center>表1-2&nbsp; 实验涉及的结构体和函数</P>
<P align=center><IMG src="../upload/1227337635578_pic.gif"></P>
<P><STRONG>七. 各模块推荐流程</STRONG><BR><STRONG>1.&nbsp; Ethernet V2数据帧发送流程</STRONG><BR>&nbsp;&nbsp;&nbsp; 编码实现Ethernet V2数据帧发送推荐使用如下流程：</P>
<P align=center><IMG src="../upload/1235353250531_pic.gif"></P>
<P align=center>图1-9&nbsp; Ethernet V2数据帧发送推荐流程</P>
<P><STRONG>2.&nbsp; Ethernet V2数据帧处理流程</STRONG><BR>&nbsp;&nbsp;&nbsp; 编码实现处理Ethernet V2输入数据帧推荐使用如下流程：</P>
<P align=center><IMG src="../upload/1235353535062_pic.gif"></P>
<P align=center>图1-10&nbsp; 处理Ethernet V2输入数据帧推荐流程</P></td>             </tr>           </table>  </td> </tr> </table> </body> </html> <script> if(window.HTMLElement) {     HTMLElement.prototype.__defineSetter__("outerHTML",function(sHTML){         var r=this.ownerDocument.createRange();         r.setStartBefore(this);         var df=r.createContextualFragment(sHTML);         this.parentNode.replaceChild(df,this);         return sHTML;         });      HTMLElement.prototype.__defineGetter__("outerHTML",function(){      var attr;         var attrs=this.attributes;         var str="<"+this.tagName.toLowerCase();         for(var i=0;i<attrs.length;i++){             attr=attrs[i];             if(attr.specified)                 str+=" "+attr.name+'="'+attr.value+'"';             }         if(!this.canHaveChildren)             return str+">";         return str+">"+this.innerHTML+"</"+this.tagName.toLowerCase()+">";         });           HTMLElement.prototype.__defineGetter__("canHaveChildren",function(){   switch(this.tagName.toLowerCase()){             case "area":             case "base":          case "basefont":             case "col":             case "frame":             case "hr":             case "img":             case "br":             case "input":             case "isindex":             case "link":             case "meta":             case "param":             return false;         }         return true;       }); }  function showMe(i) {  	objHtml=document.all["s"+i].innerHTML; 	date=new Date(); 	if(navigator.userAgent.indexOf("MSIE")>0) 		window.status="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	else 		top.document.title="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	}  	if(navigator.userAgent.indexOf("MSIE")>0) 	var objects=document.all.tags("OBJECT"); 	else 	var objects=document.getElementsByTagName("OBJECT"); 	for(i=0;i<objects.length;i++) { objects[i].style.width="100%"; objects[i].outerHTML="<a href=# onclick=\"showMe("+i+")\">动画演示</a><span id=s"+i+" style=\"display:none\">"+objects[i].outerHTML+"</span>"; } var iHtml=document.body.innerHTML;  </script> 