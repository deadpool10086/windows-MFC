<html> <head> <meta http-equiv="Content-Type" content="text/html; charset=gb2312" /> <title></title> <link href="inc/style.css" rel="stylesheet" type="text/css"> </head>  <body class=infobody> <table width="100%" height="100%" cellspacing="0">  <tr>  <td valign="top"> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>内容摘要</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle">一. 链路状态路由<BR>&nbsp;&nbsp;&nbsp; 1.&nbsp; 构造路由表<BR>&nbsp;&nbsp;&nbsp; 2.&nbsp; 链路状态数据包的创建<BR>&nbsp;&nbsp;&nbsp; 3.&nbsp; LSP的洪泛</td>             </tr>           </table> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>相关内容</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle"><P><STRONG>一. 链路状态路由</STRONG><BR>&nbsp;&nbsp;&nbsp; 链路状态路由选择的原理与距离向量路由选择的原理不同。在链路状态路由选择中，节点需要知道区域的整个拓扑――节点和链路列表，以及它们是怎样连接起来的，包括类型、代价（度量）和链路的状态（正常工作或故障），然后这个节点使用Dijkstra算法构造出路由表。</P>
<P align=center><IMG src="../upload/1236818538296_pic.gif"></P>
<P align=center>图18-1&nbsp; 链路状态路由选择的概念</P>
<P>&nbsp;&nbsp;&nbsp; 上图给出了具有5个节点的区域。每一个节点使用同样的拓扑创建路由表，但是不同节点的路由表却是不同的，这是因为路由表是基于对拓扑的不同解释计算的。这和不同的人看同一个城市的地图相似，不同的人可以有同样的地图，但是每一个人需要使用不同的路径到达他的目的地。<BR>&nbsp;&nbsp;&nbsp; 拓扑是动态的，表示每一个节点和每一条链路的最新情况。如果在网络中的某处出现了变化（例如，一条链路出故障），则拓扑必须相应的改变，每一个节点的路由表都需要进行更新。<BR>&nbsp;&nbsp;&nbsp; 一个公共的拓扑怎样能够动态的存储在每一个节点中呢？在初始时，没有节点知道区域的整体拓扑。虽然没有这个区域的整体拓扑，但是每一个节点有部分的拓扑信息，它知道它的链路的状态（类型、条件及代价）。整个区域的拓扑可以从每一个节点的部分拓扑信息组合而成。下图给出了与图18-1同样的区域，指出每一个节点的部分拓扑信息。</P>
<P align=center><IMG src="../upload/1223259506921_pic.gif"></P>
<P align=center>图18-2&nbsp; 链路状态的部分拓扑</P>
<P>&nbsp;&nbsp;&nbsp; 节点A知道它到节点B的代价为5，到节点C的代价为2，到节点D的代价为3。节点C知道它到节点A的代价为2，到节点B的代价为4，到节点E的代价为4。节点D知道它到节点A的代价为3，等等。虽然这些拓扑信息有些重叠，但是这能保证产生一个公共的关于区域完整的拓扑，并且给每一个节点提供这个拓扑信息。<BR><STRONG>1.&nbsp; 构造路由表</STRONG><BR>&nbsp;&nbsp;&nbsp; 在链路状态路由选择中，每一个节点都根据区域的拓扑生成路由表，得出到其它节点的最小代价。每个节点使用4个步骤来完成这项工作：<BR>&nbsp;&nbsp;&nbsp; 第一步，每一个节点产生链路状态，这叫做LSP（链路状态数据包）。<BR>&nbsp;&nbsp;&nbsp; 第二步，向其它节点进行LSP的传播，这叫做洪泛。<BR>&nbsp;&nbsp;&nbsp; 第三步，每一个节点形成最短路径树。<BR>&nbsp;&nbsp;&nbsp; 第四步，基于最短路径树计算路由表。<BR><STRONG>2.&nbsp; 链路状态数据包的创建</STRONG><BR>&nbsp;&nbsp;&nbsp; LSP可以携带大量的信息。现在假定它携带最小数量的数据：节点标识、链路列表、一个序号以及生存期。节点标识和链路列表用来构造拓扑。序号有利于洪泛和把新的LSP与旧的LSP区分开。生存期用来防止旧的LSP长时间留在区域中。LSP是在以下两种情况下产生的：<BR>&nbsp;&nbsp;&nbsp; （1）当这个区域的拓扑发生变化时。这时LSP的传播是快速通知区域中的所有节点更新拓扑的主要方法。<BR>&nbsp;&nbsp;&nbsp; （2）定期更新。周期性的传播LSP。对于定期传播的周期通常设置为60分钟或120分钟。较长的周期可以确保洪泛不会在网络上产生很大的通信量。<BR><STRONG>3.&nbsp; LSP的洪泛</STRONG><BR>&nbsp;&nbsp;&nbsp; 每一个节点将LSP向所有其它节点传播，而不是仅仅向其邻站传播。这个过程叫做洪泛，它基于以下几点：<BR>&nbsp;&nbsp;&nbsp; （1）产生LSP的节点把LSP的副本从它的每一个接口发送出去。<BR>&nbsp;&nbsp;&nbsp; （2）收到LSP的节点，把收到的LSP和已经有的LSP副本进行比较。如果新到达的LSP比原有的LSP还旧（检查序号即可知道），就丢弃这个LSP。如果它比较新，这个节点就进行以下的操作：<BR>&nbsp;&nbsp;&nbsp; ●&nbsp; 丢弃旧的LSP，保留新的。<BR>&nbsp;&nbsp;&nbsp; ●&nbsp; 从所有的接口（除了这个数据包到达的那个接口）发送这个LSP的副本。这就保证洪泛会在这个区域的某处（这里的节点只有一个接口）停止。</P></td>             </tr>           </table>  </td> </tr> </table> </body> </html> <script> if(window.HTMLElement) {     HTMLElement.prototype.__defineSetter__("outerHTML",function(sHTML){         var r=this.ownerDocument.createRange();         r.setStartBefore(this);         var df=r.createContextualFragment(sHTML);         this.parentNode.replaceChild(df,this);         return sHTML;         });      HTMLElement.prototype.__defineGetter__("outerHTML",function(){      var attr;         var attrs=this.attributes;         var str="<"+this.tagName.toLowerCase();         for(var i=0;i<attrs.length;i++){             attr=attrs[i];             if(attr.specified)                 str+=" "+attr.name+'="'+attr.value+'"';             }         if(!this.canHaveChildren)             return str+">";         return str+">"+this.innerHTML+"</"+this.tagName.toLowerCase()+">";         });           HTMLElement.prototype.__defineGetter__("canHaveChildren",function(){   switch(this.tagName.toLowerCase()){             case "area":             case "base":          case "basefont":             case "col":             case "frame":             case "hr":             case "img":             case "br":             case "input":             case "isindex":             case "link":             case "meta":             case "param":             return false;         }         return true;       }); }  function showMe(i) {  	objHtml=document.all["s"+i].innerHTML; 	date=new Date(); 	if(navigator.userAgent.indexOf("MSIE")>0) 		window.status="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	else 		top.document.title="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	}  	if(navigator.userAgent.indexOf("MSIE")>0) 	var objects=document.all.tags("OBJECT"); 	else 	var objects=document.getElementsByTagName("OBJECT"); 	for(i=0;i<objects.length;i++) { objects[i].style.width="100%"; objects[i].outerHTML="<a href=# onclick=\"showMe("+i+")\">动画演示</a><span id=s"+i+" style=\"display:none\">"+objects[i].outerHTML+"</span>"; } var iHtml=document.body.innerHTML;  </script> 