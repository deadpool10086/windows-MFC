<html> <head> <meta http-equiv="Content-Type" content="text/html; charset=gb2312" /> <title></title> <link href="inc/style.css" rel="stylesheet" type="text/css"> </head>  <body class=infobody> <table width="100%" height="100%" cellspacing="0">  <tr>  <td valign="top"> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>内容摘要</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle">一. Dijkstra算法在OSPF中的应用<BR>&nbsp;&nbsp;&nbsp; 1.&nbsp; 形成最短路径树：Dijkstra算法<BR>&nbsp;&nbsp;&nbsp; 2.&nbsp; 从最短路径树计算路由表</td>             </tr>           </table> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>相关内容</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle"><P><STRONG>一. Dijkstra算法在OSPF中的应用<BR>1.&nbsp; 形成最短路径树：Dijkstra算法</STRONG><BR>&nbsp;&nbsp;&nbsp; 经过LSP洪泛之后，每个节点都会有整个区域拓扑的一个副本。然而，这个拓扑对找出到其它节点的最短路径是不充分的，还需要使用最短路径树。<BR>&nbsp;&nbsp;&nbsp; 一个树是由许多节点和边构成的，其中有一个节点叫做根节点，可以从这个根节点经过一条路径到达其它节点。所谓最短路径树就是指从根节点到所有其它节点之间的路径都是最短的。在链路状态路由选择中，每一个节点都以自身作为根节点生成最短路径树。<BR>&nbsp;&nbsp;&nbsp; Dijkstra算法可以从一个图产生最短路径树。这个算法把图中的节点划分为两个集合：临时的和永久的。它找出与当前永久的节点相邻的所有节点，并使它们是临时的，然后检查它们，如果它们通过某个准则，就变为永久的。下图给出的流程图描述了Dijkstra算法。</P>
<P align=center><IMG src="../upload/1223259754531_pic.gif"></P>
<P align=center>图19-1&nbsp; Dijkstra算法</P>
<P>&nbsp;&nbsp;&nbsp; 例如，在拓扑如下图所示的网络中，使用Dijkstra算法计算节点A到其它节点的最短路径的步骤如下（在步骤中，使用灰色的圆圈代表永久节点，使用无色的圆圈代表临时节点，所有永久的节点组成永久列表，所有临时的节点组成临时列表，括号内给出了累积代价）：</P>
<P align=center><IMG src="../upload/1223259768187_pic.gif"></P>
<P align=center>图19-2&nbsp; Dijkstra算法</P>
<P>&nbsp;&nbsp;&nbsp; ●&nbsp; 让节点A作为树根，把它移到临时列表。这时两个列表是：</P>
<P align=center><IMG src="../upload/1223259916031_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; ●&nbsp; 节点A在临时列表中到所有节点有最小累积代价。因此把A移到永久列表，并把A的所有相邻节点加到临时列表。这时两个列表是：</P>
<P align=center><IMG src="../upload/1223259923140_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; ●&nbsp; 节点C在临时列表中到所有节点有最小累积代价。因此把C移到永久列表。节点C有3个相邻节点，但节点A已被处理了，因此未被处理的相邻节点仅有B和E。但B已经在临时列表中，且累积代价是5。节点A可以通过C到达节点B，累积代价是6。由于5小于6，因此就保留具有累积代价为5的节点B在临时列表中而不替换它，添加节点E到临时列表。这时两个列表是：</P>
<P align=center><IMG src="../upload/1223259931015_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; ●&nbsp; 节点D在临时列表中到所有节点有最小累积代价。因此把D移到永久列表。节点D没有未被处理的相邻节点要加到临时列表中。这时两个列表是：</P>
<P align=center><IMG src="../upload/1223259938046_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; ●&nbsp; 节点B在临时列表中到所有节点有最小累积代价。因此把B移到永久列表。然后把B的所有未被处理的相邻节点加到临时列表中（现在仅有节点E）。但E（6）已经在临时列表中，且具有更小的累积代价。到节点E（它是B的相邻节点）的累积代价是8。把节点E（6）保留在临时列表中。这时两个列表是：</P>
<P align=center><IMG src="../upload/1223259945609_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; ●&nbsp; 节点E在临时列表中到所有节点有最小累积代价。把E移到永久列表。节点E没有相邻节点。现在临时列表已空。最后的列表是：</P>
<P align=center><IMG src="../upload/1223259952687_pic.gif"></P>
<P><STRONG>2.&nbsp; 从最短路径树计算路由表</STRONG><BR>&nbsp;&nbsp;&nbsp; 每一个节点使用最短路径树构造其路由表。路由表给出从根到每一个节点的代价。下表为节点A的路由表。</P>
<P align=center>表19-1&nbsp; 节点A的路由表</P>
<P align=center><IMG src="../upload/1223259995015_pic.gif"></P>
<P align=center>&nbsp;</P></td>             </tr>           </table>  </td> </tr> </table> </body> </html> <script> if(window.HTMLElement) {     HTMLElement.prototype.__defineSetter__("outerHTML",function(sHTML){         var r=this.ownerDocument.createRange();         r.setStartBefore(this);         var df=r.createContextualFragment(sHTML);         this.parentNode.replaceChild(df,this);         return sHTML;         });      HTMLElement.prototype.__defineGetter__("outerHTML",function(){      var attr;         var attrs=this.attributes;         var str="<"+this.tagName.toLowerCase();         for(var i=0;i<attrs.length;i++){             attr=attrs[i];             if(attr.specified)                 str+=" "+attr.name+'="'+attr.value+'"';             }         if(!this.canHaveChildren)             return str+">";         return str+">"+this.innerHTML+"</"+this.tagName.toLowerCase()+">";         });           HTMLElement.prototype.__defineGetter__("canHaveChildren",function(){   switch(this.tagName.toLowerCase()){             case "area":             case "base":          case "basefont":             case "col":             case "frame":             case "hr":             case "img":             case "br":             case "input":             case "isindex":             case "link":             case "meta":             case "param":             return false;         }         return true;       }); }  function showMe(i) {  	objHtml=document.all["s"+i].innerHTML; 	date=new Date(); 	if(navigator.userAgent.indexOf("MSIE")>0) 		window.status="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	else 		top.document.title="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	}  	if(navigator.userAgent.indexOf("MSIE")>0) 	var objects=document.all.tags("OBJECT"); 	else 	var objects=document.getElementsByTagName("OBJECT"); 	for(i=0;i<objects.length;i++) { objects[i].style.width="100%"; objects[i].outerHTML="<a href=# onclick=\"showMe("+i+")\">动画演示</a><span id=s"+i+" style=\"display:none\">"+objects[i].outerHTML+"</span>"; } var iHtml=document.body.innerHTML;  </script> 