<html> <head> <meta http-equiv="Content-Type" content="text/html; charset=gb2312" /> <title></title> <link href="inc/style.css" rel="stylesheet" type="text/css"> </head>  <body class=infobody> <table width="100%" height="100%" cellspacing="0">  <tr>  <td valign="top"> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:none" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:none"><nobr>aabb1aabb</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:none" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle"><P>&nbsp;&nbsp;&nbsp; 在线程体内，如果该线程完全独立，与其他线程没有数据存取等资源操作上的冲突，则可按照通常单线程的方法进行编程。但是，在多线程处理时情况常常不是这样，线程之间经常要同时访问一些资源。由于对共享资源进行访问引起冲突是不可避免的，为了解决这种线程同步问题，Win32 API提供了多种同步控制对象来帮助程序员解决共享资源访问冲突。在介绍这些同步对象之前先介绍一下等待函数，因为所有控制对象的访问控制都要用到这个函数。 <BR>&nbsp;&nbsp;&nbsp; Win32 API提供了一组能使线程阻塞其自身执行的等待函数。这些函数在其参数中的一个或多个同步对象产生了信号，或者超过规定的等待时间才会返回。在等待函数未返回时，线程处于等待状态，此时线程只消耗很少的CPU时间。使用等待函数既可以保证线程的同步，又可以提高程序的运行效率。最常用的等待函数是： </P>
<P align=center><IMG src="../upload/1228272435453_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; 而函数WaitForMultipleObjects可以用来同时监测多个同步对象，该函数的声明为：</P>
<P align=center><IMG src="../upload/1234156391171_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; （1）互斥体对象 <BR>&nbsp;&nbsp;&nbsp; Mutex 对象的状态在它不被任何线程拥有时才有信号，而当它被拥有时则无信号。Mutex 对象很适合用来协调多个线程对共享资源的互斥访问。可按下列步骤使用该对象： <BR>&nbsp;&nbsp;&nbsp; 首先，建立互斥体对象，得到句柄： HANDLE CreateMutex(); <BR>&nbsp;&nbsp;&nbsp; 然后，在线程可能产生冲突的区域前（即访问共享资源之前）调用WaitForSingleObject，将句柄传给函数，请求占用互斥对象：</P>
<P align=center><IMG src="../upload/1228272471515_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; 注：该调用的含义为获取hMutex互斥体所有权，如5秒钟内未获取到，则函数返回WAIT_TIMEOUT，如获得其所有权，则返回WAIT_OBJECT_0，如果失败则返回WAIT_FAILED。<BR>&nbsp;&nbsp;&nbsp; 共享资源访问结束，释放对互斥体对象的占用：</P>
<P align=center><IMG src="../upload/1228272490375_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; 互斥体对象在同一时刻只能被一个线程占用，当互斥体对象被一个线程占用时，若有另一线程想占用它，则必须等到前一线程释放后才能成功。 <BR>&nbsp;&nbsp;&nbsp; 当不再需要互斥体对象时，应当使用CloseHandle关闭其句柄以释放内核对象：</P>
<P align=center><IMG src="../upload/1228272501484_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; （2）信号对象 <BR>&nbsp;&nbsp;&nbsp; 信号对象允许同时对多个线程共享资源进行访问，在创建对象时指定最大可同时访问的线程数。当一个线程申请访问成功后，信号对象中的计数器减一，调用ReleaseSemaphore函数后，信号对象中的计数器加一。其中，计数器值大于或等于０，但小于或等于创建时指定的最大值。如果一个应用在创建一个信号对象时，将其计数器的初始值设为０，就阻塞了其他线程，保护了资源。等初始化完成后，调用ReleaseSemaphore() 函数将其计数器增加至最大值，则可进行正常的存取访问。可按下列步骤使用该对象：<BR>&nbsp;&nbsp;&nbsp; ●&nbsp; 首先，创建信号对象：HANDLE CreateSemaphore() 或者打开一个信号对象： HANDLE OpenSemaphore();<BR>&nbsp;&nbsp;&nbsp; ●&nbsp; 然后，在线程访问共享资源之前调用WaitForSingleObject；<BR>&nbsp;&nbsp;&nbsp; ●&nbsp; 共享资源访问完成后，应释放对信号对象的占用： ReleaseSemaphore()。<BR>&nbsp;&nbsp;&nbsp; （3）事件对象 <BR>&nbsp;&nbsp;&nbsp; 事件对象(Event)是最简单的同步对象，它包括有信号和无信号两种状态。在线程访问某一资源之前，需要等待某一事件的发生，这时用事件对象最合适。例如：只有在通信端口缓冲区收到数据后，监视线程才被激活。 <BR>&nbsp;&nbsp;&nbsp; 事件对象是用CreateEvent() 函数建立的。该函数可以指定事件对象的类和事件的初始状态。如果是手工重置事件，那么它总是保持有信号状态，直到用ResetEvent() 函数重置成无信号的事件。如果是自动重置事件，那么它的状态在单个等待线程释放后会自动变为无信号的。用SetEvent() 可以把事件对象设置成有信号状态。在建立事件时，可以为对象命名，这样其他进程中的线程可以用OpenEvent() 函数打开指定名字的事件对象句柄。<BR>&nbsp;&nbsp;&nbsp; （4）临界区对象 <BR>&nbsp;&nbsp;&nbsp; 在临界区中异步执行时，它只能在同一进程的线程之间共享资源处理。虽然此时上面介绍的几种方法均可使用，但是，使用临界区的方法则使同步管理的效率更高。使用时先定义一个CRITICAL_SECTION结构的临界区对象，在进程使用之前调用如下函数对对象进行初始化:</P>
<P align=center><IMG src="../upload/1228272529531_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; 当一个线程要求使用临界区时，调用函数：</P>
<P align=center><IMG src="../upload/1228272541609_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; 或者</P>
<P align=center><IMG src="../upload/1228272558234_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; 当要求退出临界区时，调用函数</P>
<P align=center><IMG src="../upload/1228272577765_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; 释放对临界区对象的占用，供其他线程使用。<BR>&nbsp;&nbsp;&nbsp; 下面给出一个较为完整的多线程程序示例：</P>
<P align=center><IMG src="../upload/1228272593562_pic.gif"></P></td>             </tr>           </table>  </td> </tr> </table> </body> </html> <script> if(window.HTMLElement) {     HTMLElement.prototype.__defineSetter__("outerHTML",function(sHTML){         var r=this.ownerDocument.createRange();         r.setStartBefore(this);         var df=r.createContextualFragment(sHTML);         this.parentNode.replaceChild(df,this);         return sHTML;         });      HTMLElement.prototype.__defineGetter__("outerHTML",function(){      var attr;         var attrs=this.attributes;         var str="<"+this.tagName.toLowerCase();         for(var i=0;i<attrs.length;i++){             attr=attrs[i];             if(attr.specified)                 str+=" "+attr.name+'="'+attr.value+'"';             }         if(!this.canHaveChildren)             return str+">";         return str+">"+this.innerHTML+"</"+this.tagName.toLowerCase()+">";         });           HTMLElement.prototype.__defineGetter__("canHaveChildren",function(){   switch(this.tagName.toLowerCase()){             case "area":             case "base":          case "basefont":             case "col":             case "frame":             case "hr":             case "img":             case "br":             case "input":             case "isindex":             case "link":             case "meta":             case "param":             return false;         }         return true;       }); }  function showMe(i) {  	objHtml=document.all["s"+i].innerHTML; 	date=new Date(); 	if(navigator.userAgent.indexOf("MSIE")>0) 		window.status="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	else 		top.document.title="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	}  	if(navigator.userAgent.indexOf("MSIE")>0) 	var objects=document.all.tags("OBJECT"); 	else 	var objects=document.getElementsByTagName("OBJECT"); 	for(i=0;i<objects.length;i++) { objects[i].style.width="100%"; objects[i].outerHTML="<a href=# onclick=\"showMe("+i+")\">动画演示</a><span id=s"+i+" style=\"display:none\">"+objects[i].outerHTML+"</span>"; } var iHtml=document.body.innerHTML;  </script> 