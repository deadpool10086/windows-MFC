<html> <head> <meta http-equiv="Content-Type" content="text/html; charset=gb2312" /> <title></title> <link href="inc/style.css" rel="stylesheet" type="text/css"> </head>  <body class=infobody> <table width="100%" height="100%" cellspacing="0">  <tr>  <td valign="top"> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>内容摘要</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle"><P>一.&nbsp;内部和外部路由选择<BR>二.&nbsp;距离向量路由<BR>三.&nbsp;链路状态路由</P></td>             </tr>           </table> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>相关内容</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle"><P><STRONG>一.&nbsp;内部和外部路由选择<BR></STRONG>&nbsp;&nbsp;&nbsp; 巨大的互联网是由许多小网络组成的，这些小网络使用路由器连接起来。在从源点到终点的通信过程中，数据包可能经过多个路由器，直到到达连接目的网络的路由器为止。<BR>&nbsp;&nbsp;&nbsp; 路由器从一个网络接收数据包，并把数据包转发到另一个网络。一个路由器通常和多个网络相连。当路由器收到数据包时，它应当将数据包转发到哪一个网络取决于路由表的信息。<BR>&nbsp;&nbsp;&nbsp; 路由表可以是静态的也可以是动态的。静态路由表的路由信息是管理员设置的，并由管理员手动进行更新。动态路由表的路由信息是随着互联网的变化而自动更新的。现在只要互联网中有一些变化，路由器就应该尽快的更新路由表，所以现在互联网中的路由器大多使用动态路由表。例如，某条链路不能正常工作了，路由器就应该找到另一条路由，并把路由表进行更新。<BR>&nbsp;&nbsp;&nbsp; 由于互联网需要动态路由表的支持，因此就产生了多种路由选择协议。路由选择协议是一些规则和过程的组合。规则使得路由器之间能够共享它们所知道的互联网情况和邻站信息，而过程用来合并从其它路由器收到的信息。<BR>&nbsp;&nbsp;&nbsp; 今天的互联网非常庞大，仅仅使用一种路由选择协议是无法处理所有路由器的路由表更新任务的。为此，互联网划分为多个自治系统（AS）。自治系统是在单一的管理机构管辖下的一组网络和路由器。在自治系统内部的路由选择叫做域内路由选择。在自治系统之间的路由选择叫做域间路由选择。每一个自治系统使用一种域内路由选择协议（例如RIP或OSPF）处理本自治系统内部的路由选择。而对于自治系统之间的路由选择一般只能使用“域间路由选择协议（BGP）”来进行路由选择。如图6-1所示：</P>
<P align=center><IMG src="../upload/1223272454281_pic.gif"><BR>图6-1&nbsp; 内部和外部路由选择<BR></P>
<P><STRONG>二.&nbsp;距离向量路由</STRONG><BR>&nbsp;&nbsp;&nbsp; 距离向量路由选择协议得到的路由是任何两个节点之间代价最小的路由。在协议中，每一个节点维护一个到其它节点的最小距离向量表。在这个表中还指出路径的下一跳地址，以便把数据包发送到目的节点。<BR>&nbsp;&nbsp;&nbsp; 图6-2给出了一个具有5个节点的网络，以及这些节点维护的最小距离向量表。<BR>&nbsp;&nbsp;&nbsp; 节点A的路由表指出怎样能够从这个节点到达任何节点。例如，到节点E的最小代价是6，这条路由经过节点C。</P>
<P align=center><IMG src="../upload/1237266734843_pic.gif"></P>
<P align=center>图6-2&nbsp; 距离向量路由表</P>
<P>&nbsp;&nbsp;&nbsp; （1）初始化<BR>&nbsp;&nbsp;&nbsp; 在图6-2中的表是稳定的，每一个节点都知道如何到达其它节点，以及到达其它节点的代价。但是最初的情况并不是这样的，在初始状态下，每一个节点只知道到与它直接相连的节点的代价（假定每一个节点能够向其相邻节点发送一个报文，并且找出从它到这些邻节点的代价）。图6-3给出了每一个节点的最初的表。对于到不相邻节点的代价则标记为无穷大（不可达）。</P>
<P align=center><IMG src="../upload/1237266741312_pic.gif"></P>
<P align=center>图6-3&nbsp; 在距离向量路由选择中的表的初始化</P>
<P>&nbsp;&nbsp;&nbsp; （2）共享<BR>&nbsp;&nbsp;&nbsp; 距离向量路由选择总体的思想就是在相邻节点之间共享路由信息。节点A不知道有关节点E的路由信息，但是节点C知道。如果节点C把它的路由信息与节点A共享，那么节点A也就会知道怎样到达节点E。另一方面，节点C不知道怎样到达节点D，但是节点A知道。如果节点A把它的路由信息与节点C共享，那么节点C也就会知道怎样到达节点D。这就是路由信息的共享，作为相邻节点的节点A和节点C，如果它们彼此互助，就可以改进其路由表。<BR>&nbsp;&nbsp;&nbsp; （3）更新<BR>&nbsp;&nbsp;&nbsp; 当一个节点收到相邻节点的路由信息时，它就需要更新其路由表。更新的方法如图6-4所示：</P>
<P align=center><IMG src="../upload/1237266781828_pic.gif"></P>
<P align=center>图6-4&nbsp; 路由表更新</P>
<P>&nbsp;&nbsp;&nbsp; 在这里，假设收到的路由信息包含两列内容：目的节点和到达目的节点的代价。如图6-5所示：</P>
<P align=center><IMG src="../upload/1223272495968_pic.gif"></P>
<P align=center>图6-5&nbsp; 只包含两列的路由表</P>
<P>&nbsp;&nbsp;&nbsp; 图6-6表示节点A在收到从节点C传来的路由信息后怎样更新它的路由表。</P>
<P align=center><IMG src="../upload/1223272503046_pic.gif"></P>
<P align=center>图6-6&nbsp; 在距离向量路由选择中的更新</P>
<P>&nbsp;&nbsp;&nbsp; 这里应该注意几点。第一，把一个数与无穷大相加，结果还是无穷大。第二，修正的表指出怎样从节点A经过节点C到达节点A。如果节点A需要经过节点C到达它自己，它必须先到节点C再返回，因此代价是4。第三，节点A经过路由表更新后，路由表的最后一项改变了。以前，节点A不知道如何到达节点E（代价是无穷大）；现在它知道到达节点E的代价是6，要经过节点C。<BR>&nbsp;&nbsp;&nbsp; 每一个节点都从其相邻节点接收路由表信息，并用这个信息来更新自己的路由表。在短时间内，如果网络本身没有变化（如链路出了故障），所有节点的路由表就会达到稳定状态，表中的内容保持不变。<BR>&nbsp;&nbsp;&nbsp; （4）什么时候共享<BR>&nbsp;&nbsp;&nbsp; 一个节点周期性地向其所有相邻节点发送它的路由表信息。这个周期通常为30秒，具体的时间取决于使用的距离向量路由选择协议。<BR></P>
<P><STRONG>三.&nbsp;链路状态路由<BR></STRONG>&nbsp;&nbsp;&nbsp; 链路状态路由选择的原理与距离向量路由选择的原理不同。在链路状态路由选择中，节点需要知道区域的整个拓扑――节点和链路列表，以及它们是怎样连接起来的，包括类型、代价（度量）和链路的状态（正常工作或故障），然后这个节点使用Dijkstra算法构造出路由表。图6-7给出了这个概念。</P>
<P align=center><IMG src="../upload/1223272646781_pic.gif"></P>
<P align=center>图6-7&nbsp; 链路状态路由选择的概念</P>
<P>&nbsp;&nbsp;&nbsp; 图6-7给出了具有5个节点的区域。每一个节点使用同样的拓扑创建路由表，但是不同节点的路由表却是不同的，这是因为路由表是基于对拓扑的不同解释计算的。这和不同的人看同一个城市的地图相似，不同的人可以有同样的地图，但是每一个人需要使用不同的路径到达他的目的地。<BR>&nbsp;&nbsp;&nbsp; 拓扑是动态的，表示每一个节点和每一条链路的最新情况。如果在网络中的某处出现了变化（例如，一条链路出故障），则拓扑必须相应的改变，每一个节点的路由表都需要进行更新。一个公共的拓扑怎样能够动态的存储在每一个节点中呢？在初始时，没有节点知道区域的整体拓扑。虽然没有这个区域的整体拓扑，但是每一个节点有部分的拓扑信息，它知道它的链路的状态（类型、条件及代价）。整个区域的拓扑可以从每一个节点的部分拓扑信息组合而成。图6-8给出了与图6-7同样的区域，指出每一个节点的部分拓扑信息。</P>
<P align=center><IMG src="../upload/1223272655031_pic.gif"></P>
<P align=center>图6-8&nbsp; 链路状态的部分拓扑</P>
<P>&nbsp;&nbsp;&nbsp; 节点A知道它到节点B的代价为5，到节点C的代价为2，到节点D的代价为3。节点C知道它到节点A的代价为2，到节点B的代价为4，到节点E的代价为4。节点D知道它到节点A的代价为3，等等。虽然这些拓扑信息有些重叠，但是这能保证产生一个公共的关于区域完整的拓扑，并且给每一个节点提供这个拓扑信息。<BR>&nbsp;&nbsp;&nbsp; （1）构造路由表<BR>&nbsp;&nbsp;&nbsp; 在链路状态路由选择中，每一个节点都根据区域的拓扑生成路由表，得出到其它节点的最小代价。每个节点使用4个步骤来完成这项工作：<BR>&nbsp;&nbsp;&nbsp; 第一步，每一个节点产生链路状态，这叫做LSP（链路状态数据包）。<BR>&nbsp;&nbsp;&nbsp; 第二步，向其它节点进行LSP的传播，这叫做洪泛。<BR>&nbsp;&nbsp;&nbsp; 第三步，每一个节点形成最短路径树。<BR>&nbsp;&nbsp;&nbsp; 第四步，基于最短路径树计算路由表。<BR>&nbsp;&nbsp;&nbsp; （2）链路状态数据包的创建<BR>&nbsp;&nbsp;&nbsp; LSP可以携带大量的信息。现在假定它携带最小数量的数据：节点标识和链路列表、一个序号以及寿命。节点标识和链路列表用来构造拓扑。序号有利于洪泛和把新的LSP与旧的LSP区分开。寿命用来防止旧的LSP长时间留在区域中。LSP是在以下两种情况下产生的：<BR>&nbsp;&nbsp;&nbsp; <SPAN lang=EN-US style="FONT-SIZE: 10.5pt; FONT-FAMILY: Wingdings; mso-font-kerning: 1.0pt; mso-bidi-font-family: <A>'</A>Times New Roman<A>'</A>; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体; mso-ascii-font-family: <A>'</A>Times New Roman<A>'</A>; mso-hansi-font-family: <A>'</A>Times New Roman<A>'</A>; mso-char-type: symbol; mso-symbol-font-family: Wingdings"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Wingdings">l</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10.5pt; FONT-FAMILY: <A>'</A>Times New Roman<A>'</A>; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体">&nbsp;</SPAN>&nbsp;当这个区域的拓扑发生变化时。这时LSP的传播是快速通知区域中的所有节点更新拓扑的主要方法。<BR>&nbsp;&nbsp;&nbsp; <SPAN lang=EN-US style="FONT-SIZE: 10.5pt; FONT-FAMILY: Wingdings; mso-font-kerning: 1.0pt; mso-bidi-font-family: <A>'</A>Times New Roman<A>'</A>; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体; mso-ascii-font-family: <A>'</A>Times New Roman<A>'</A>; mso-hansi-font-family: <A>'</A>Times New Roman<A>'</A>; mso-char-type: symbol; mso-symbol-font-family: Wingdings"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Wingdings">l</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10.5pt; FONT-FAMILY: <A>'</A>Times New Roman<A>'</A>; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体">&nbsp;</SPAN>&nbsp;定期更新。周期性的传播LSP。对于定期传播的周期通常设置为60分钟或2小时。较长的周期可以确保洪泛不会在网络上产生很大的通信量。<BR>&nbsp;&nbsp;&nbsp; LSP的洪泛：每一个节点将LSP向所有其它节点传播，而不是仅仅向其邻站传播。这个过程叫做洪泛，它基于以下几点：<BR>&nbsp;&nbsp;&nbsp; <SPAN lang=EN-US style="FONT-SIZE: 10.5pt; FONT-FAMILY: Wingdings; mso-font-kerning: 1.0pt; mso-bidi-font-family: <A>'</A>Times New Roman<A>'</A>; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体; mso-ascii-font-family: <A>'</A>Times New Roman<A>'</A>; mso-hansi-font-family: <A>'</A>Times New Roman<A>'</A>; mso-char-type: symbol; mso-symbol-font-family: Wingdings"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Wingdings">l</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10.5pt; FONT-FAMILY: <A>'</A>Times New Roman<A>'</A>; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体">&nbsp;</SPAN>&nbsp;产生LSP的节点把LSP的副本从它的每一个接口发送出去。<BR>&nbsp;&nbsp;&nbsp; <SPAN lang=EN-US style="FONT-SIZE: 10.5pt; FONT-FAMILY: Wingdings; mso-font-kerning: 1.0pt; mso-bidi-font-family: <A>'</A>Times New Roman<A>'</A>; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体; mso-ascii-font-family: <A>'</A>Times New Roman<A>'</A>; mso-hansi-font-family: <A>'</A>Times New Roman<A>'</A>; mso-char-type: symbol; mso-symbol-font-family: Wingdings"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Wingdings">l</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10.5pt; FONT-FAMILY: <A>'</A>Times New Roman<A>'</A>; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体">&nbsp;</SPAN>&nbsp;收到LSP的节点，把收到的LSP和已经有的副本进行比较。如果新到达的LSP比原有的LSP还旧（检查序号即可知道），就丢弃这个LSP。如果它比较新，这个节点就进行以下的操作：<BR>&nbsp;&nbsp;&nbsp; <SPAN lang=EN-US style="FONT-SIZE: 10.5pt; FONT-FAMILY: Wingdings; mso-font-kerning: 1.0pt; mso-bidi-font-family: <A>'</A>Times New Roman<A>'</A>; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体; mso-ascii-font-family: <A>'</A>Times New Roman<A>'</A>; mso-hansi-font-family: <A>'</A>Times New Roman<A>'</A>; mso-char-type: symbol; mso-symbol-font-family: Wingdings"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Wingdings">l</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10.5pt; FONT-FAMILY: <A>'</A>Times New Roman<A>'</A>; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体">&nbsp;</SPAN>&nbsp;丢弃旧的LSP，保留新的。<BR>&nbsp;&nbsp;&nbsp; <SPAN lang=EN-US style="FONT-SIZE: 10.5pt; FONT-FAMILY: Wingdings; mso-font-kerning: 1.0pt; mso-bidi-font-family: <A>'</A>Times New Roman<A>'</A>; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体; mso-ascii-font-family: <A>'</A>Times New Roman<A>'</A>; mso-hansi-font-family: <A>'</A>Times New Roman<A>'</A>; mso-char-type: symbol; mso-symbol-font-family: Wingdings"><SPAN style="mso-char-type: symbol; mso-symbol-font-family: Wingdings">l</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10.5pt; FONT-FAMILY: <A>'</A>Times New Roman<A>'</A>; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体">&nbsp;</SPAN>&nbsp;从所有的接口（除了这个数据包到达的那个接口）发送这个LSP的副本。这就保证洪泛会在这个区域的某处（这里的节点只有一个接口）停止。</P></td>             </tr>           </table>  </td> </tr> </table> </body> </html> <script> if(window.HTMLElement) {     HTMLElement.prototype.__defineSetter__("outerHTML",function(sHTML){         var r=this.ownerDocument.createRange();         r.setStartBefore(this);         var df=r.createContextualFragment(sHTML);         this.parentNode.replaceChild(df,this);         return sHTML;         });      HTMLElement.prototype.__defineGetter__("outerHTML",function(){      var attr;         var attrs=this.attributes;         var str="<"+this.tagName.toLowerCase();         for(var i=0;i<attrs.length;i++){             attr=attrs[i];             if(attr.specified)                 str+=" "+attr.name+'="'+attr.value+'"';             }         if(!this.canHaveChildren)             return str+">";         return str+">"+this.innerHTML+"</"+this.tagName.toLowerCase()+">";         });           HTMLElement.prototype.__defineGetter__("canHaveChildren",function(){   switch(this.tagName.toLowerCase()){             case "area":             case "base":          case "basefont":             case "col":             case "frame":             case "hr":             case "img":             case "br":             case "input":             case "isindex":             case "link":             case "meta":             case "param":             return false;         }         return true;       }); }  function showMe(i) {  	objHtml=document.all["s"+i].innerHTML; 	date=new Date(); 	if(navigator.userAgent.indexOf("MSIE")>0) 		window.status="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	else 		top.document.title="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	}  	if(navigator.userAgent.indexOf("MSIE")>0) 	var objects=document.all.tags("OBJECT"); 	else 	var objects=document.getElementsByTagName("OBJECT"); 	for(i=0;i<objects.length;i++) { objects[i].style.width="100%"; objects[i].outerHTML="<a href=# onclick=\"showMe("+i+")\">动画演示</a><span id=s"+i+" style=\"display:none\">"+objects[i].outerHTML+"</span>"; } var iHtml=document.body.innerHTML;  </script> 