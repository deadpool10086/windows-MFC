<html> <head> <meta http-equiv="Content-Type" content="text/html; charset=gb2312" /> <title></title> <link href="inc/style.css" rel="stylesheet" type="text/css"> </head>  <body class=infobody> <table width="100%" height="100%" cellspacing="0">  <tr>  <td valign="top"> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>内容摘要</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle">三. SOCKS和HTTP的区别 <BR>四. SOCKS 5通信协议简介</td>             </tr>           </table> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>相关内容</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle"><P>三. SOCKS和HTTP的区别 <BR>&nbsp;&nbsp;&nbsp; SOCKS是一组由Internal工程工作小组（IETF）所开发出来的开放软件开放标准，用来处理网络安全的事宜。SOCKS象一堵墙被夹在Internal服务器和客户端之间，对于出入企业网络的资讯提供流量和安全的管理。SOCKS这个名词并不是一组英文字头的缩写，而是一个和TCP/IP的Socket端口有关的安全标准，一般防火墙系统通常是象网关（Gateway）一样是作用在OSI模型的第七层也就是应用层上，对TCP/IP的高级协议，如Telnet、FTP、HTTP和SMTP加以管制，而SOCKS作用在OSI模型的第四层也就是会话层上，象一个代理一样对客户端到服务器端或服务器和服务器之间的数据联系，提供安全上的服务。由于SOCKS作用在会话层上，因此它是一个提供会话层到会话层间安全服务的方案，不受高层应用程序变更的影响。 Socks代理只是简单地传递数据包，而不必关心是何种应用协议(比如FTP、HTTP和NNTP请求)，所以Socks代理服务器比应用层代理服务器要快的<BR>&nbsp;&nbsp;&nbsp; 被代理端与代理服务器通过“SOCKS 4/5代理协议”进行通迅(具体协议内容可查看RFC文档)。SOCKS4代理协议可以说是对HTTP代理协议的加强，它不仅是对HTTP协议进行代理，而是对所有向外的连接进行代理，是没有协议限制的。也就是说，只要你向外连接，它就给你代理，并不管你用的是什么协议，极大的弥补了HTTP代理协议的不足，使得很多在HTTP代理情况下无法使用的网络软件都可以使用了。(例如：QQ、MSN、ICQ等软件 )SOCKS 5代理协议又对前一版进行了修改，增加了支持UDP代理及身份验证的功能。它不是“协议代理”，所以它会对所有的连接进行代理，而不管用的是什么协议。<BR>&nbsp;&nbsp;&nbsp; SOCKS 5是一种透明的代理协议, 而且很好的解决了认证,保密,以及proxy接力等问题netscape,ie等可以直接使用这种代理, 而且可以使用SOCKS 5的client软件使那些不直接支持SOCKS 5 proxy的internet软件的通过代理访问internet. 更重要的是, SOCKS 5支持UDP协议的代理, 从而成为很多firewall后面的人使用ICQ不可缺少的东西。<BR>四. SOCKS 5通信协议简介<BR>&nbsp;&nbsp;&nbsp; 很多组织的内部通过防火墙隔离与外界的通信，一般都可以控制HTTP、FTP和SMTP的代理服务，然而随着日益广泛的应用，就需要一种通用的协议来完成代理的功能，SOCKS 代理规范就此诞生。先是比较早的SOCKS 4 ，到现在的SOCKS 5。SOCKS 5比SOCKS 4增加了UDP的代理功能。SOCKS 5 协议规定了代理的通信逻辑，它支持权限认证管理，还可以进行端口限制，通常其服务端口为1080。此外，为保证数据不会在第一级就丢失，该协议必须通过TCP方式进行通信。<BR>&nbsp;&nbsp;&nbsp; SOCKS 5客户端与服务器的通信过程如下：<BR>&nbsp;&nbsp;&nbsp; ●&nbsp; 客户建立与服务器的连接，发送协议协商命令，命令的格式如下图所示：</P>
<P align=center><IMG src="../upload/1228094481578_pic.gif"></P>
<P align=center>图20-1&nbsp; 命令的格式</P>
<P>&nbsp;&nbsp;&nbsp; 字段名及解释如下：<BR>&nbsp;&nbsp;&nbsp; VER：协议版本 对于SOCKS 5其值为0x05<BR>&nbsp;&nbsp;&nbsp; NMETHODS：客户端支持的认证方式的数量（即METHODS中含有的字节数（octets））<BR>&nbsp;&nbsp;&nbsp; METHODS：客户端支持的认证方式列表<BR>&nbsp;&nbsp;&nbsp; 下表给出了SOCKS 5 定义的所有有效认证方法，但不同的服务器可以有自己的定义：</P>
<P align=center>表20-1&nbsp; SOCKS 5有效认证方法</P>
<P align=center><IMG src="../upload/1228094504890_pic.gif"></P>
<P>&nbsp;&nbsp;&nbsp; ●&nbsp; 当服务器接受到客户的以上消息后就会回复如下图所示的格式的数据：</P>
<P align=center><IMG src="../upload/1228094514718_pic.gif"></P>
<P align=center>图20-2&nbsp; 数据格式</P>
<P>&nbsp;&nbsp;&nbsp; 其中，版本号要和客户请求的一样，如果不一样则表示服务器支持的版本号不对。而第二个参数与客户一样为表20-1所列情况的一种。<BR>&nbsp;&nbsp;&nbsp; ●&nbsp; 一旦服务器和客户经过上面的认证后，如果上面的方法是0x02即通过账号密码认证，便开始进行身份认证。账号和密码的认证按下面的步骤进行，首先客户向服务器发送明码的账号和密码，格式如下图所示：</P>
<P align=center><IMG src="../upload/1228094529671_pic.gif"></P>
<P align=center>图20-3&nbsp; 账号和密码的格式</P>
<P>&nbsp;&nbsp;&nbsp; 其中，版本号为0x01而不是前面的0x05，这一点要特别注意，后面的一个字段表示名字的长度，然后就是账号，接着密码长度，然后是密码。这里所有的字符串不需要在末尾肩上NULL字符。服务器收到上面协商数据后给客户端返回：</P>
<P align=center><IMG src="../upload/1228094542703_pic.gif"></P>
<P align=center>图20-4&nbsp; 数据格式</P>
<P>&nbsp;&nbsp;&nbsp; 如果Status为0，表示验证成功，否则返回用各个服务器自己定义的错误编码。这种方法的缺点是安全行很差，尤其是在可以SNIFF的内部网，用户的账号密码很容易被别人监控。<BR>&nbsp;&nbsp;&nbsp; ●&nbsp; 一旦通过了账号和密码验证，就可以进行数据通信了，通信的格式如下图所示：</P>
<P align=center><IMG src="../upload/1228094555281_pic.gif"></P>
<P align=center>图20-5&nbsp; 通信的格式</P>
<P>&nbsp;&nbsp;&nbsp; 各个字段的解释如下：<BR>&nbsp;&nbsp;&nbsp; 其中 VER 和前面一样是0x05（对于 SOCKS 5）。<BR>&nbsp;&nbsp;&nbsp; CMD表示客户请求的命令类型，有下面几种：<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONNECT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x01<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BIND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x02<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UDP ASSOCIATE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x03<BR>&nbsp;&nbsp;&nbsp; ATYP 表示地址类型，也有三种可能性：<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IPv4 addrss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x01<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DOMAINNAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x03<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IPv6 address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x04<BR>&nbsp;&nbsp;&nbsp; 如果ATYP为IPv4则DST.ADDR字段长度为四个字节，如果为IPv6则为16个字节；如果ATYP为DOMAINNAME则表示长度是可变的，但一般不会超过256字节，它的第一个字节就表示该域的长度。<BR>&nbsp;&nbsp;&nbsp; DST.PORT 表示端口号，长度为固定的2个字节。<BR>&nbsp;&nbsp;&nbsp; 下面来简单介绍一下三个命令的不同之处：<BR>&nbsp;&nbsp;&nbsp; CONNECT模式：表示客户请求的是去连接防火墙外面的套接字。<BR>&nbsp;&nbsp;&nbsp; BIND模式：表示客户建立套接字并等待外面的程序的连入。该命令的典型应用是在FTP的主动模式，就是需要自己建立套接字，等待服务器的连接。<BR>&nbsp;&nbsp;&nbsp; UDP ASSOCIATE 模式：UDP 是刚刚增加的功能，可以发送和接收UDP数据包。</P></td>             </tr>           </table>  </td> </tr> </table> </body> </html> <script> if(window.HTMLElement) {     HTMLElement.prototype.__defineSetter__("outerHTML",function(sHTML){         var r=this.ownerDocument.createRange();         r.setStartBefore(this);         var df=r.createContextualFragment(sHTML);         this.parentNode.replaceChild(df,this);         return sHTML;         });      HTMLElement.prototype.__defineGetter__("outerHTML",function(){      var attr;         var attrs=this.attributes;         var str="<"+this.tagName.toLowerCase();         for(var i=0;i<attrs.length;i++){             attr=attrs[i];             if(attr.specified)                 str+=" "+attr.name+'="'+attr.value+'"';             }         if(!this.canHaveChildren)             return str+">";         return str+">"+this.innerHTML+"</"+this.tagName.toLowerCase()+">";         });           HTMLElement.prototype.__defineGetter__("canHaveChildren",function(){   switch(this.tagName.toLowerCase()){             case "area":             case "base":          case "basefont":             case "col":             case "frame":             case "hr":             case "img":             case "br":             case "input":             case "isindex":             case "link":             case "meta":             case "param":             return false;         }         return true;       }); }  function showMe(i) {  	objHtml=document.all["s"+i].innerHTML; 	date=new Date(); 	if(navigator.userAgent.indexOf("MSIE")>0) 		window.status="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	else 		top.document.title="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	}  	if(navigator.userAgent.indexOf("MSIE")>0) 	var objects=document.all.tags("OBJECT"); 	else 	var objects=document.getElementsByTagName("OBJECT"); 	for(i=0;i<objects.length;i++) { objects[i].style.width="100%"; objects[i].outerHTML="<a href=# onclick=\"showMe("+i+")\">动画演示</a><span id=s"+i+" style=\"display:none\">"+objects[i].outerHTML+"</span>"; } var iHtml=document.body.innerHTML;  </script> 