<html> <head> <meta http-equiv="Content-Type" content="text/html; charset=gb2312" /> <title></title> <link href="inc/style.css" rel="stylesheet" type="text/css"> </head>  <body class=infobody> <table width="100%" height="100%" cellspacing="0">  <tr>  <td valign="top"> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>内容摘要</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle">三. TCP连接创建与释放实现代码解析<BR>四. TCP报文的上层投递实现代码解析<BR>五. 滑动窗口实现代码解析</td>             </tr>           </table> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>相关内容</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle"><STRONG>三. TCP连接创建与释放实现代码解析</STRONG><BR>&nbsp;&nbsp;&nbsp; 本实验中所编写的代码只是TCP协议的一个简单处理过程，在编写时同学们不需要考虑差错控制和流量控制，只要能实现TCP协议的基本功能即可。<BR>&nbsp;&nbsp;&nbsp; netproto_tcpconn_student.h和netproto_tcpconn_student.c这两个文件完成了协议栈中TCP连接的创建与释放功能。<BR>&nbsp;&nbsp;&nbsp; netproto_tcpconn_student.h文件中的内容并不多，主要是定义了一个宏__TCP_HALF_CLOSE，这个宏用于控制TCP连接释放的方式，如果该宏定义为0，则采用三次握手方式关闭TCP连接，反之，如果该宏所定义的值不为0，则采用四次握手方式释放TCP连接。<BR>&nbsp;&nbsp;&nbsp; netproto_tcpconn_shudent.c文件是协议栈中TCP连接的创建与释放功能的实现部分，在连接的创建与释放过程中没有数据传输，即当TCP连接建立以后立即释放。其中定义了3个函数。下面介绍这些协议栈的实现部分。<BR>&nbsp;&nbsp;&nbsp; 函数netp_tcpconn_init_student将会被主线程调用，用于初始化一个TCP连接。在该函数中主要进行一些初始化工作，例如选择是作为TCP服务器角色进行连接还是作为TCP客户端角色进行连接、源端口号和目的端口号等。值得注意的是，作为TCP服务器的时候，程序会在指定端口进行监听。而作为TCP客户端的时候，该函数会负责向TCP服务器发送一个TCP SYN数据报，从而开始TCP连接过程。该函数中的发送TCP SYN数据报功能需要学生完成。<BR>&nbsp;&nbsp;&nbsp; 当有数据到达本机网络接口时，函数netp_tcpconn_input_student将被调用，并传递给这个函数原始数据。在该函数中，需要判断一些条件值来确定接收到的数据包是否为TCP连接所感兴趣的，如果是TCP连接感兴趣的数据报，则提交给netp_tcp_input函数处理，如果不是，则返回NETP_PUSH_TO_LWIP交给协议栈继续处理。<BR>&nbsp;&nbsp;&nbsp; netp_tcp_input函数实现了TCP连接创建和释放的核心功能。该函数会根据当前的连接状态和收到的事件做相应的操作并切换到后续状态。其状态切换过程如TCP状态转换图所示。<BR><STRONG>四. TCP报文的上层投递实现代码解析</STRONG><BR>&nbsp;&nbsp;&nbsp; 文件netproto_tcpif_student.h和文件netproto_tcpif_student.c实现了TCP对高层投递的接口。在netproto_tcpif_student.c中定义了8个函数，其中函数netp_send_tcp、netp_tcp_connect、netp_tcp_listen、netp_tcp_close和is_conn_established为高层协议调用接口。<BR>&nbsp;&nbsp;&nbsp; 函数netp_tcp_listen用于创建一个TCP连接，并保持在监听状态，这时高层协议充当TCP服务器的角色，当在监听状态时，就可以接收TCP客户端的连接请求。该函数有一个参数为指向用户回调函数的指针，当连接建立并有数据到来时，用户回调函数将被调用处理输入的数据。<BR>&nbsp;&nbsp;&nbsp; 函数netp_tcp_connect用于连接到一个TCP服务器，即向TCP服务器发送一个TCP SYN报文用于与服务器三次握手。这时高层协议充当TCP客户端的角色。该函数也接受一个用户回调函数的指针参数，其作用与函数netp_tcp_listen的用户回调函数参数作用相同。<BR>&nbsp;&nbsp;&nbsp; 在TCP连接建立以后，高层协议可以调用netp_send_tcp函数发送TCP数据。该函数使用已经建立好的TCP连接将数据发送给目的主机。<BR>&nbsp;&nbsp;&nbsp; 函数netp_tcp_close用于终止TCP连接。在调用该函数以后，TCP连接将被释放，TCB的状态将变为CLOSED。<BR>&nbsp;&nbsp;&nbsp; netp_con_send_tcp、netp_tcpif_input_student和netp_tcp_input这三个函数不能被高层协议调用，他们的作用是维护TCP连接。<BR>&nbsp;&nbsp;&nbsp; 函数netp_tcpif_input_student和netp_tcp_input的作用与netproto_tcp_student.c文件中的netp_tcpif_input_student、netp_tcp_input函数作用类似，用于接受被更新TCP连接状态。<BR>&nbsp;&nbsp;&nbsp; netp_con_send_tcp函数发送指定类型的、不带有负载的TCP数据报，用于建立和释放TCP连接，或者发送确认报文。<BR><STRONG>五. 滑动窗口实现代码解析</STRONG><BR>&nbsp;&nbsp;&nbsp; 文件netproto_tcpwindow_student.h和文件netproto_tcpwindow_student.c实现了TCP滑动窗口。在实现中，只对输出缓冲区使用了滑动窗口机制，对输入缓冲区并没有使用滑动窗口机制。<BR>&nbsp;&nbsp;&nbsp; netproto_tcpwindow_student.c中的内容与TCP报文的上层投递实现中netproto_tcpif_student.c中的内容相近，不同之处在于netproto_tcpwindow_student.c的实现中增加了一个全局的发送缓冲区以及一些滑动窗口控制变量。<BR>&nbsp;&nbsp;&nbsp; netp_send_buff是一个全局数组，类型为u8_t，长度为宏SEND_BUFF_SIZE所定义的数值，SEND_BUFF_SIZE是在一次TCP连接中能传送的最大字节数。<BR>&nbsp;&nbsp;&nbsp; 全局变量wnd_left、wnd_right、wnd_next、recv_wnd_size和send_wnd_size共同维护TCP滑动窗口，wnd_left记录滑动窗口左沿，wnd_right记录滑动窗口右沿，wnd_next记录下一个可发送的字节，recv_wnd_size记录接收滑动窗口大小，send_wnd_size记录发送滑动窗口大小。send_wnd_size的默认值为64，值得注意的是，在实际应用中，发送滑动窗口的大小会远远大于这个值，在这里使用一个较小的值是为了更方便的观察滑动窗口的变化。<BR>&nbsp;&nbsp;&nbsp; 函数netp_send_tcp、netp_con_send_tcp、netp_tcp_connect、netp_tcp_listen、netp_tcp_close、netp_tcpwindow_input_student、netp_tcp_input、is_conn_established与netproto_tcpif_student.c文件即TCP报文的上层投递实现中相应函数实现了类似的功能，这里就不再讲述。<BR>&nbsp;&nbsp;&nbsp; 另外一个函数netp_set_wndsize用于设置接收窗口大小。</td>             </tr>           </table>  </td> </tr> </table> </body> </html> <script> if(window.HTMLElement) {     HTMLElement.prototype.__defineSetter__("outerHTML",function(sHTML){         var r=this.ownerDocument.createRange();         r.setStartBefore(this);         var df=r.createContextualFragment(sHTML);         this.parentNode.replaceChild(df,this);         return sHTML;         });      HTMLElement.prototype.__defineGetter__("outerHTML",function(){      var attr;         var attrs=this.attributes;         var str="<"+this.tagName.toLowerCase();         for(var i=0;i<attrs.length;i++){             attr=attrs[i];             if(attr.specified)                 str+=" "+attr.name+'="'+attr.value+'"';             }         if(!this.canHaveChildren)             return str+">";         return str+">"+this.innerHTML+"</"+this.tagName.toLowerCase()+">";         });           HTMLElement.prototype.__defineGetter__("canHaveChildren",function(){   switch(this.tagName.toLowerCase()){             case "area":             case "base":          case "basefont":             case "col":             case "frame":             case "hr":             case "img":             case "br":             case "input":             case "isindex":             case "link":             case "meta":             case "param":             return false;         }         return true;       }); }  function showMe(i) {  	objHtml=document.all["s"+i].innerHTML; 	date=new Date(); 	if(navigator.userAgent.indexOf("MSIE")>0) 		window.status="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	else 		top.document.title="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	}  	if(navigator.userAgent.indexOf("MSIE")>0) 	var objects=document.all.tags("OBJECT"); 	else 	var objects=document.getElementsByTagName("OBJECT"); 	for(i=0;i<objects.length;i++) { objects[i].style.width="100%"; objects[i].outerHTML="<a href=# onclick=\"showMe("+i+")\">动画演示</a><span id=s"+i+" style=\"display:none\">"+objects[i].outerHTML+"</span>"; } var iHtml=document.body.innerHTML;  </script> 