<html> <head> <meta http-equiv="Content-Type" content="text/html; charset=gb2312" /> <title></title> <link href="inc/style.css" rel="stylesheet" type="text/css"> </head>  <body class=infobody> <table width="100%" height="100%" cellspacing="0">  <tr>  <td valign="top"> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>内容摘要</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle">八. 协议栈实现代码解析<BR>九. 各模块推荐流程<BR>&nbsp;&nbsp;&nbsp; 1.&nbsp; UDP数据包发送流程<BR>&nbsp;&nbsp;&nbsp; 2.&nbsp; 输入UDP数据包处理流程<BR>&nbsp;&nbsp;&nbsp; 3.&nbsp; UDP发送接口实现流程<BR>&nbsp;&nbsp;&nbsp; 4.&nbsp; UDP接收接口实现流程</td>             </tr>           </table> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>相关内容</nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle"><P><STRONG>八. 协议栈实现代码解析</STRONG><BR>&nbsp;&nbsp;&nbsp; 本实验将通过对netproto_udp_student.h、netproto_udp_shudent.c、netproto_udpif_student.h、netproto_udpif_student.c四个文件进行编码，完成协议栈中UDP协议的实现。<BR>&nbsp;&nbsp;&nbsp; netproto_udp_student.h和netproto_udp_shudent.c文件用于实现UDP数据包发送和接收。其中，netproto_udp_student.h文件中定义了UDP协议实现相关数值以及UDP的负载内容、负载长度，关键代码如下所示：</P>
<P align=center><IMG src="../upload/1236739510015_pic.bmp"></P>
<P>&nbsp;&nbsp;&nbsp; 这段代码定义了5个宏，他们代表的含义如下表所示：</P>
<P align=center>表6-2&nbsp; netproto_udp_student.h中定义的宏</P>
<P align=center><IMG src="../upload/1236739525406_pic.bmp"></P>
<P>&nbsp;&nbsp;&nbsp; 在实验的编码过程中，应该使用这些宏对相应的变量进行赋值。<BR>&nbsp;&nbsp;&nbsp; netproto_udp_shudent.c文件是协议栈中UDP数据包发送和接收的实现部分，其中定义了2个函数。下面介绍这些协议栈的实现部分。<BR>&nbsp;&nbsp;&nbsp; 函数netp_udp_output_student的功能是构造并发送一个UDP数据包，其高层协议为自定义协议类型，负载内容为自定义负载。这个函数的编码工作需要由学生完成。<BR>&nbsp;&nbsp;&nbsp; 当有数据到达本机网络接口时，函数netp_udp_input_student将被调用，并传递给这个函数原始数据。在该函数中，需要判断一些条件值来确定接收到的数据包为自定义UDP数据，如果是自定义UDP数据包，则输出负载内容，如果不是，则返回NETP_PUSH_TO_LWIP交给协议栈继续处理。<BR>&nbsp;&nbsp;&nbsp; netproto_udpif_student.h和netproto_udpif_shudent.c文件用于实现UDP上层投递的功能，即为高层使用UDP协议提供了接口。其中，netproto_udpif_student.h文件中并没有定义太多内容。netproto_udpif_shudent.c文件是协议栈中UDP上层投递的功能的实现部分，其中定义了一个全局变量recv_port和2个函数。<BR>&nbsp;&nbsp;&nbsp; 全局变量recv_port的作用很简单，它记录了发送UDP数据报时的源端口号作为接收UDP数据报的过滤条件。<BR>&nbsp;&nbsp;&nbsp; 函数netp_send_udp通过IP层接口发送UDP数据报，该函数功能需要学生完成。<BR>&nbsp;&nbsp;&nbsp; 函数netp_udp_input_student处理输入数据包，如果输入的数据报满足过滤条件，则投递给上层协议使用。该函数功能需要学生完成。<BR>&nbsp;&nbsp;&nbsp; 在编码过程中可能会设计到一些结构体、宏和函数，下表是对他们进行和介绍：</P>
<P align=center>表6-3&nbsp; 实验涉及的结构体、宏和函数</P>
<P align=center><IMG src="../upload/1229735284312_pic.gif"></P>
<P><STRONG>九. 各模块推荐流程<BR>1.&nbsp; UDP数据包发送流程<BR></STRONG>&nbsp;&nbsp;&nbsp; 编码实现UDP数据包发送推荐使用如下流程：</P>
<P align=center><IMG src="../upload/1235357510796_pic.gif"></P>
<P align=center>图6-6&nbsp; UDP数据包发送推荐流程</P>
<P><STRONG>2.&nbsp; 输入UDP数据包处理流程</STRONG><BR>&nbsp;&nbsp;&nbsp; 编码实现处理UDP输入数据包推荐使用如下流程：</P>
<P align=center><IMG src="../upload/1235357521359_pic.gif"></P>
<P align=center>图6-7&nbsp; 处理UDP输入数据包推荐流程</P>
<P><STRONG>3.&nbsp; UDP发送接口实现流程</STRONG><BR>&nbsp;&nbsp;&nbsp; 编码实现UDP发送接口推荐使用如下流程：</P>
<P align=center><IMG src="../upload/1235357534203_pic.gif"></P>
<P align=center>图6-8&nbsp; UDP发送接口实现推荐流程</P>
<P><STRONG>4.&nbsp; UDP接收接口实现流程</STRONG><BR>&nbsp;&nbsp;&nbsp; 编码实现UDP接收接口推荐使用如下流程：</P>
<P align=center><IMG src="../upload/1235357542109_pic.gif"></P>
<P align=center>图6-9&nbsp; UDP接收接口实现推荐流程</P></td>             </tr>           </table>  </td> </tr> </table> </body> </html> <script> if(window.HTMLElement) {     HTMLElement.prototype.__defineSetter__("outerHTML",function(sHTML){         var r=this.ownerDocument.createRange();         r.setStartBefore(this);         var df=r.createContextualFragment(sHTML);         this.parentNode.replaceChild(df,this);         return sHTML;         });      HTMLElement.prototype.__defineGetter__("outerHTML",function(){      var attr;         var attrs=this.attributes;         var str="<"+this.tagName.toLowerCase();         for(var i=0;i<attrs.length;i++){             attr=attrs[i];             if(attr.specified)                 str+=" "+attr.name+'="'+attr.value+'"';             }         if(!this.canHaveChildren)             return str+">";         return str+">"+this.innerHTML+"</"+this.tagName.toLowerCase()+">";         });           HTMLElement.prototype.__defineGetter__("canHaveChildren",function(){   switch(this.tagName.toLowerCase()){             case "area":             case "base":          case "basefont":             case "col":             case "frame":             case "hr":             case "img":             case "br":             case "input":             case "isindex":             case "link":             case "meta":             case "param":             return false;         }         return true;       }); }  function showMe(i) {  	objHtml=document.all["s"+i].innerHTML; 	date=new Date(); 	if(navigator.userAgent.indexOf("MSIE")>0) 		window.status="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	else 		top.document.title="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	}  	if(navigator.userAgent.indexOf("MSIE")>0) 	var objects=document.all.tags("OBJECT"); 	else 	var objects=document.getElementsByTagName("OBJECT"); 	for(i=0;i<objects.length;i++) { objects[i].style.width="100%"; objects[i].outerHTML="<a href=# onclick=\"showMe("+i+")\">动画演示</a><span id=s"+i+" style=\"display:none\">"+objects[i].outerHTML+"</span>"; } var iHtml=document.body.innerHTML;  </script> 