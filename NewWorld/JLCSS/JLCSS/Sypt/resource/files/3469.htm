<html> <head> <meta http-equiv="Content-Type" content="text/html; charset=gb2312" /> <title></title> <link href="inc/style.css" rel="stylesheet" type="text/css"> </head>  <body class=infobody> <table width="100%" height="100%" cellspacing="0">  <tr>  <td valign="top"> <table>   <tr>   <td height=25></td>   </tr>           <table width="100%" border="0" align="center" cellpadding="0" cellspacing="0" style="border-bottom:#1873b5 solid 1px">             <tr><td style="background-image:url(images/cinfo_left.GIF);display:" width="5"></td>               <td width="86" height="28" style="padding-left:4px;padding-right:4px;background-image:url(images/cinfo_center.GIF);color:#3081bd;text-align:center;padding-bottom:0px;padding-top:4px;display:"><nobr>附录C 协议分析器使用说明 </nobr></td> <td style="background-image:url(images/cinfo_right.GIF);display:" width="5"></td>               <td>&nbsp;</td>             </tr>           </table>           <table width="100%" border="0" align="center" cellpadding="5" cellspacing="1" bgcolor="#FFFFFF" style="border:#1873b5 solid 1px;border-top:0px">             <tr>               <td bgcolor="#F5FAFA" style="padding-left:20;padding-right:20px" id="ptitle"><P>协议分析器负责捕获网络上的各种数据帧，分析其中包含的各层协议，提供辅助教学功能。主要有两个功能模块：会话分析和协议解析。<BR>进入协议分析器，单击[开始捕获]按钮进行数据捕获。刷新显示后，在会话分析和协议解析视图显示对数据的分析。<BR>一. 会话分析<BR>会话分析功能将捕获到的常用协议的数据帧加入会话列表，并且有会话次序和数据传输方向的图示，使学生能够直观的看出一次完整的会话过程。</P>
<P align=center><IMG src="../upload/1255135695107_pic.bmp"><BR>图3-1&nbsp; 会话分析界面</P>
<P><BR>会话分析功能主要用于有完整会话过程的协议，例如：ARP、ICMP、HTTP、DNS、SMTP、POP3等。会话列表包含有通信双方的IP地址、端口号、会话类别。通过一次完整会话的分析，使学生加深对协议原理的理解。<BR>二. 协议解析<BR>协议解析界面显示如图所示：</P>
<P align=center><IMG src="../upload/1255135770065_pic.bmp"><BR>图3-2&nbsp; 协议解析界面</P>
<P><BR>该窗口主要有三个显示区：概要解析列表、详细解析树和十六进制数据显示区，十六进制数据显示区包括十六进制数据显示和字符显示两种状态。<BR>学生可以从详细解析树中获得非常详细的解释和说明，并且不同栏目的数据和解释可以按照学生的选择实现动态跟踪显示，方便学生对数据的分析。<BR>定义过滤条件，可保存成过滤器配置。当应用程序重新启动时，不加载上一次保存的过滤器配置，只能使用默认的过滤器。过滤器可以实现网络地址、数据模式和协议过滤三种过滤方式。<BR>●&nbsp; 网络地址过滤<BR>网络地址过滤中可以使用IP地址、MAC地址。<BR>填写网络地址，中间的编辑框表示数据方向，在这里可以选择需要过滤地址数据的传输方向，“站点1”中填写传输的一端地址，“站点2”中填写传输的另一端地址，如果不填写“站点2”，系统则缺省设为“Any”，表示过滤站点1到任意地址的数据。</P>
<P align=center><IMG src="../upload/1255135858862_pic.bmp"><BR>图3-3&nbsp; 网络地址过滤设置</P>
<P><BR>●&nbsp; 数据模式过滤<BR>数据模式过滤，是针对十六进制数据而言的。起始位置指的是十六进制数据中的第几个字节，数据长度是指从起始位置算起共有多少个字节。下面的文本框中要输入过滤的十六进制内容，长度要与填入的“数据长度”一致。点击［确定］按钮之后，加入的过滤条件会生效，在数据捕获时会将符合条件的内容过滤出来。</P>
<P align=center><IMG src="../upload/1255136600599_pic.bmp"><BR>图3-4&nbsp; 数据模式过滤</P>
<P>&nbsp;</P>
<P>●&nbsp; 协议过滤模式<BR>协议过滤可以针对具体某个协议进行设置，如果针对该协议有封装类型复选框，则需要进行选择，如不做选择，过滤设置无效。<BR>按钮主要功能：<BR>操作：可以新建、删除、重命名过滤器。<BR>加载：调入以前保存的扩展名为“.flt”的过滤器文件。<BR>另存为：将新设置的过滤器存储为扩展名为“.flt”的文件。</P>
<P align=center><IMG src="../upload/1255136643340_pic.bmp"><BR>图3-5&nbsp; 协议过滤设置</P>
<P><BR>在过滤器[操作]中点击[新建]按钮，在“过滤器名称”中输入过滤条件名称，然后进行过滤条件设置。也可以通过［删除］、［重命名］按钮对学生自定义的过滤条件进行删除、重命名等操作。但不能对“缺省过滤条件”（即“默认”）进行这样的操作。<BR>在定义过滤器窗口中，单击［另存为］按钮可保存该过滤条件，通过［加载］按钮可打开保存过的过滤条件，方便学生的使用。<BR></P></td>             </tr>           </table>  </td> </tr> </table> </body> </html> <script> if(window.HTMLElement) {     HTMLElement.prototype.__defineSetter__("outerHTML",function(sHTML){         var r=this.ownerDocument.createRange();         r.setStartBefore(this);         var df=r.createContextualFragment(sHTML);         this.parentNode.replaceChild(df,this);         return sHTML;         });      HTMLElement.prototype.__defineGetter__("outerHTML",function(){      var attr;         var attrs=this.attributes;         var str="<"+this.tagName.toLowerCase();         for(var i=0;i<attrs.length;i++){             attr=attrs[i];             if(attr.specified)                 str+=" "+attr.name+'="'+attr.value+'"';             }         if(!this.canHaveChildren)             return str+">";         return str+">"+this.innerHTML+"</"+this.tagName.toLowerCase()+">";         });           HTMLElement.prototype.__defineGetter__("canHaveChildren",function(){   switch(this.tagName.toLowerCase()){             case "area":             case "base":          case "basefont":             case "col":             case "frame":             case "hr":             case "img":             case "br":             case "input":             case "isindex":             case "link":             case "meta":             case "param":             return false;         }         return true;       }); }  function showMe(i) {  	objHtml=document.all["s"+i].innerHTML; 	date=new Date(); 	if(navigator.userAgent.indexOf("MSIE")>0) 		window.status="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	else 		top.document.title="cmdOpen,"+date.getTime()+","+(objHtml.substring(objHtml.lastIndexOf("\"",objHtml.indexOf(".swf\""))+1,objHtml.indexOf(".swf\"")+4)); 	}  	if(navigator.userAgent.indexOf("MSIE")>0) 	var objects=document.all.tags("OBJECT"); 	else 	var objects=document.getElementsByTagName("OBJECT"); 	for(i=0;i<objects.length;i++) { objects[i].style.width="100%"; objects[i].outerHTML="<a href=# onclick=\"showMe("+i+")\">动画演示</a><span id=s"+i+" style=\"display:none\">"+objects[i].outerHTML+"</span>"; } var iHtml=document.body.innerHTML;  </script> 